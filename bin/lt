#!/bin/bash

# Загрузка переменных из .env, если он существует
ENV_FILE=$(find . -maxdepth 1 -name ".env" | head -n 1)
if [ -f "$ENV_FILE" ]; then
  export $(grep -v '^#' "$ENV_FILE" | xargs)
fi

# Значения по умолчанию
SERVICE=${LT_CONTAINER_NAME:-app}
SHELL_CMD=${LT_CONTAINER_SHELL:-bash}
USER_ARG=${LT_CONTAINER_USER:+"--user $LT_CONTAINER_USER"}
: ${USER_ARG:="--user $(id -u):$(id -g)"}
COMPOSE_FILE_ARG=${LT_DOCKER_COMPOSE_PATH:+-f $LT_DOCKER_COMPOSE_PATH}

# Справка
show_help() {
  echo "Laravel Tool CLI (lt)"
  echo ""
  echo "Доступные команды:"
  echo "  lt up                        Запуск контейнеров"
  echo "  lt down                      Остановка контейнеров"
  echo "  lt restart                   Перезапуск контейнеров"
  echo "  lt ps                        Показать статус контейнеров"
  echo "  lt logs [service]           Логи контейнера"
  echo "  lt build                    Сборка контейнеров"
  echo "  lt exec [cmd]               Выполнить команду в контейнере ($SERVICE)"
  echo "  lt shell                    Открыть $SHELL_CMD в контейнере"
  echo "  lt artisan [cmd]            Artisan команда"
  echo "  lt composer [cmd]           Composer команда"
  echo "  lt help                     Показать справку"
  echo ""
  echo "Docker Compose команды:"
  echo "  config, pull, push, run, start, stop, rm, kill, top, version, pause, unpause"
  echo ""
  echo "Настройки через .env:"
  echo "  LT_CONTAINER_NAME           Имя контейнера (по умолчанию: app)"
  echo "  LT_CONTAINER_SHELL          Оболочка внутри контейнера (по умолчанию: bash)"
  echo "  LT_CONTAINER_USER           Пользователь в контейнере (или UID:GID с хоста)"
  echo "  LT_DOCKER_COMPOSE_PATH      Путь к кастомному docker-compose.yml"
}

# Обработка команд
case "$1" in
  up|down|restart|build|start|stop|rm|pull|push|top|kill|pause|unpause|config|version|ps)
    docker compose $COMPOSE_FILE_ARG "$@"
    ;;
  logs)
    shift
    docker compose $COMPOSE_FILE_ARG logs "$@"
    ;;
  artisan)
    shift
    docker compose $COMPOSE_FILE_ARG exec $USER_ARG "$SERVICE" php artisan "$@"
    ;;
  composer)
    shift
    docker compose $COMPOSE_FILE_ARG exec $USER_ARG "$SERVICE" composer "$@"
    ;;
  shell|bash)
    docker compose $COMPOSE_FILE_ARG exec $USER_ARG "$SERVICE" "$SHELL_CMD"
    ;;
  exec)
    shift
    docker compose $COMPOSE_FILE_ARG exec $USER_ARG "$SERVICE" "$@"
    ;;
  help|-h|--help)
    show_help
    ;;
  *)
    docker compose $COMPOSE_FILE_ARG exec $USER_ARG "$SERVICE" "$@"
    ;;
esac