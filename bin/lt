#!/bin/bash

# Путь к .env
ENV_FILE=$(find . -maxdepth 1 -name ".env" | head -n 1)

# Функция загрузки переменной
load_env_var() {
  grep -E "^$1=" "$ENV_FILE" | tail -n 1 | sed 's/^.*=//' | tr -d '"'
}

# Только нужные переменные
if [ -f "$ENV_FILE" ]; then
  SERVICE=$(load_env_var LT_CONTAINER_NAME)
  SHELL_CMD=$(load_env_var LT_CONTAINER_SHELL)
  CONTAINER_USER=$(load_env_var LT_CONTAINER_USER)
  COMPOSE_PATH=$(load_env_var LT_DOCKER_COMPOSE_PATH)
fi

# Значения по умолчанию
: ${SERVICE:=app}
: ${SHELL_CMD:=bash}

# Аргументы пользователя
if [ -n "$CONTAINER_USER" ]; then
  USER_ARG=(--user "$CONTAINER_USER")
else
  USER_ARG=(--user "$(id -u):$(id -g)")
fi

# Аргументы docker compose файла
if [ -n "$COMPOSE_PATH" ]; then
  COMPOSE_FILE_ARG=(-f "$COMPOSE_PATH")
else
  COMPOSE_FILE_ARG=()
fi

# Справка
show_help() {
  echo "Laravel Tool CLI (lt)"
  echo ""
  echo "Доступные команды:"
  echo "  lt up                        Запуск контейнеров"
  echo "  lt down                      Остановка контейнеров"
  echo "  lt restart                   Перезапуск контейнеров"
  echo "  lt ps                        Показать статус контейнеров"
  echo "  lt logs [service]           Логи контейнера"
  echo "  lt build                    Сборка контейнеров"
  echo "  lt exec [cmd]               Выполнить команду в контейнере ($SERVICE)"
  echo "  lt shell                    Открыть $SHELL_CMD в контейнере"
  echo "  lt artisan [cmd]            Artisan команда"
  echo "  lt composer [cmd]           Composer команда"
  echo "  lt help                     Показать справку"
  echo ""
  echo "Docker Compose команды:"
  echo "  config, pull, push, run, start, stop, rm, kill, top, version, pause, unpause"
  echo ""
  echo "Настройки через .env:"
  echo "  LT_CONTAINER_NAME           Имя контейнера (по умолчанию: app)"
  echo "  LT_CONTAINER_SHELL          Оболочка внутри контейнера (по умолчанию: bash)"
  echo "  LT_CONTAINER_USER           Пользователь в контейнере (или UID:GID с хоста)"
  echo "  LT_DOCKER_COMPOSE_PATH      Путь к docker-compose.yml (или массив файлов)"
}

# Обработка команд
case "$1" in
  up|down|restart|build|start|stop|rm|pull|push|top|kill|pause|unpause|config|version|ps)
    docker compose "${COMPOSE_FILE_ARG[@]}" "$@"
    ;;
  logs)
    shift
    docker compose "${COMPOSE_FILE_ARG[@]}" logs "$@"
    ;;
  artisan)
    shift
    docker compose "${COMPOSE_FILE_ARG[@]}" exec "${USER_ARG[@]}" "$SERVICE" php artisan "$@"
    ;;
  composer)
    shift
    docker compose "${COMPOSE_FILE_ARG[@]}" exec "${USER_ARG[@]}" "$SERVICE" composer "$@"
    ;;
  shell|bash)
    docker compose "${COMPOSE_FILE_ARG[@]}" exec "${USER_ARG[@]}" "$SERVICE" "$SHELL_CMD"
    ;;
  exec)
    shift
    docker compose "${COMPOSE_FILE_ARG[@]}" exec "${USER_ARG[@]}" "$SERVICE" "$@"
    ;;
  help|-h|--help)
    show_help
    ;;
  *)
    docker compose "${COMPOSE_FILE_ARG[@]}" exec "${USER_ARG[@]}" "$SERVICE" "$@"
    ;;
esac